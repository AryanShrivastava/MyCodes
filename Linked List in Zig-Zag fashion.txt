Linked List in Zig-Zag fashion
Easy (GfG)

Given a Linked list, rearrange it such that converted list should be of the form a < b > c < d > e < f .. where a, b, c are consecutive data node of linked list and such that the order of linked list is sustained.
For example: In 11 15 20 5 10 we consider only 11 20 5 15 10 because it satisfies the above condition and the order of linked list. 5 20 11 15 10 is not considered as it does not follow the order of linked list.

To maintain the order, keep swapping the adjacent nodes of the linked list (whenever required) to get the desired output.  

Example 1:

Input:
LinkedList: 1->2->3->4 
Output: 1 3 2 4

/*

The structure of linked list is the following
struct Node
{
    int data;
    Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
};
*/

class Solution
{
    public:
    Node *zigZag(Node* head)
    {
     // your code goes here
     Node *curr = head;
     bool flag = true;
     
     while(curr->next != NULL)
     {
         if(flag)
        {
            if(curr->data > curr->next->data)
            swap(curr->data, curr->next->data);
            
        }
        
        else
        {
            if(curr->data < curr->next->data)
            swap(curr->data, curr->next->data);
        }
        
        curr = curr->next;
        flag = !flag;
     }
     
     return head;
    }
};
