Intersection of two sorted Linked lists
Easy (GfG)

Given two lists sorted in increasing order, create a new list representing the intersection of the two lists. The new list should be made with its own memory â€” the original lists should not be changed.

Example 1:

Input:
L1 = 1->2->3->4->6
L2 = 2->4->6->8
Output: 2 4 6
Explanation: For the given first two
linked list, 2, 4 and 6 are the elements
in the intersection.

/* The structure of the Linked list Node is as follows:

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

*/

void push(Node **newhead , int data)
{
    
    struct Node *new_node = (struct Node*)malloc(sizeof(struct Node));
    
    new_node->data = data;
 
    new_node->next = (*newhead);
 
    (*newhead) = new_node;
}

Node* findIntersection(Node* head1, Node* head2)
{
    // Your Code Here
    Node *newlist = NULL;
    Node **lastPtrRef = &newlist; 
    
    while(head1 != NULL && head2 != NULL)
    {
        if(head1->data == head2->data)
        {
            push(lastPtrRef, head1->data);
             lastPtrRef = &((*lastPtrRef)->next);
             
             head1 = head1->next;
             head2 = head2->next;
        }
        
        else if(head1->data < head2->data)
        {
            head1 = head1->next;
        }
        else
            head2 = head2->next;
    }
    
    return newlist;
    
}